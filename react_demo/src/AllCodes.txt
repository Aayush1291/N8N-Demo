1. Basic Components
#Text Component

const TextComponent = () => {
  return <p>Hello, this is a text component!</p>;
};

export default TextComponent;


#Button Component
const ButtonComponent = () => {
  return <button onClick={() => alert("Button Clicked!")}>Click Me</button>;
};

export default ButtonComponent;


#Radio Button
const RadioButton = () => {
  return (
    <div>
      <input type="radio" name="option" value="A" /> Option A
      <input type="radio" name="option" value="B" /> Option B
    </div>
  );
};

export default RadioButton;




2. Functions in React
const Greeting = () => {
  function sayHello() {
    alert("Hello, React Beginner!");
  }

  return <button onClick={sayHello}>Greet</button>;
};

export default Greeting;




3. Props
const Welcome = ({ name }: { name: string }) => {
  return <h2>Welcome, {name}!</h2>;
};

export default function App() {
  return <Welcome name="John" />;
}




4. useState Hook
import { useState } from "react";
const Counter = () => {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
};

export default Counter;




5. useEffect Hook
import { useEffect } from "react";

const EffectDemo = () => {
  useEffect(() => {
    console.log("Component Mounted!");

    return () => console.log("Component Unmounted!");
  }, []);

  return <p>Check the console!</p>;
};

export default EffectDemo;




6. If Statements
const AgeCheck = ({ age }: { age: number }) => {
  if (age >= 18) {
    return <p>You are an adult.</p>;
  } else {
    return <p>You are underage.</p>;
  }
};

export default function App() {
  return <AgeCheck age={20} />;
}




7. Ternary Operator
const TernaryExample = ({ loggedIn }: { loggedIn: boolean }) => {
  return <p>{loggedIn ? "Welcome Back!" : "Please Log In"}</p>;
};

export default function App() {
  return <TernaryExample loggedIn={true} />;
}




8. Map Function
const FruitsList = () => {
  const fruits = ["Apple", "Banana", "Orange"];

  return (
    <ul>
      {fruits.map((fruit, index) => (
        <li key={index}>{fruit}</li>
      ))}
    </ul>
  );
};

export default FruitsList;




9. API Call with GET Request
import { useEffect, useState } from "react";

const FetchUsers = () => {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/users")
      .then((res) => res.json())
      .then((data) => setUsers(data));
  }, []);

  return (
    <ul>
      {users.map((user: any) => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  );
};

export default FetchUsers;




10. API Call with POST Request

import { useState } from "react";

const CreateUser = () => {
  const [name, setName] = useState("");

  const handleSubmit = async () => {
    const response = await fetch("https://jsonplaceholder.typicode.com/users", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ name }),
    });

    const data = await response.json();
    console.log("User Created:", data);
  };

  return (
    <div>
      <input type="text" onChange={(e) => setName(e.target.value)} placeholder="Enter name" />
      <button onClick={handleSubmit}>Create User</button>
    </div>
  );
};

export default CreateUser;




11. Fetch API with Async/Await

import { useState, useEffect } from "react";

const FetchData = () => {
  const [data, setData] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      const response = await fetch("https://jsonplaceholder.typicode.com/posts");
      const result = await response.json();
      setData(result);
    };

    fetchData();
  }, []);

  return (
    <ul>
      {data.map((item: any) => (
        <li key={item.id}>{item.title}</li>
      ))}
    </ul>
  );
};

export default FetchData;




12. Error Handling with Try/Catch

import { useState, useEffect } from "react";

const FetchWithErrorHandling = () => {
  const [data, setData] = useState([]);
  const [error, setError] = useState("");

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch("https://jsonplaceholder.typicode.com/posts");
        if (!response.ok) throw new Error("Network response was not ok");
        const result = await response.json();
        setData(result);
      } catch (err: any) {
        setError(err.message);
      }
    };

    fetchData();
  }, []);

  return (
    <div>
      {error ? <p>Error: {error}</p> : data.map((item: any) => <li key={item.id}>{item.title}</li>)}
    </div>
  );
};

export default FetchWithErrorHandling;